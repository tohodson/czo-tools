# -*- coding: utf-8 -*-
# Author: Tim Hodson <tohodson@illinois.edu>

"""Module to process stream discharge at gaging stations.

Functions:
    -'process_stage()': Take a file containing stage data and return a file
    with discharge data.
    -'process_148()': Function for processing logs from station 148.
    -'df_to_log()': Function for intelligently writing dataframes to
    log.

"""

__version__ = '0.0.1'
__author__ = 'Tim Hodson'

import sys, os, glob
import pandas as pd


from discharge.rating import get_rating

VALID_STATIONS = ['148']

def process_stage(in_file, out_file, station):
    """Takes a file containing stage data and returns a file with discharge
    data.

    Args:
		in_file (str): CSV file containing stage data.
		out_file (str): Output CSV file with discharge data.
        station (str): Station ID (typically 3 digit ISWS ID)
    """
    try:
        VALID_STATIONS.index(station) # check if station is valid

    except ValueError:
        print('Error: {} is not a valid station'.format(station))
        sys.exit(1)

    if station == '148':
        header, df = process_148(in_file)

    df_to_log(df, out_file, header)

def process_148(in_file):
    """Process dischage from Allerton Trust Farm (148)

    This function reads in a csv generated by the datalogger at Allerton Trust
    Farm, then computes discharge.

    Args:
		in_file (str): csv from Allerton Trust Farm data logger

   Returns:
        header (str): The header that will go into log file.
        df (DataFrame): A Dataframe containing discharge data.
    """

    try:
        f = open(in_file)
        header = f.readline().strip('\n')
        columns = f.readline().strip('\n')
        units   = f.readline().strip('\n')
        measurements = f.readline().strip('\n')

        df = pd.read_csv(f, sep=',', names = columns.split(',') )

    except IOError:
        print('Not a valid input file')

    rate = get_rating('148')
    df['"Discharge"'] = rate( df['"DepthUP"'])
    header = header + '\n' + columns + ',"Discharge"\n' + units + ',"meters^3/second"\n' + measurements + ',"Smp"\n'
    f.close()
    return header, df


def df_to_log(df, log, header=False, mode='w'):
    """ Write dataframe containing to a log file.

    This function writes a dataframe to a log file. If the logfile exists, the
    dataframe will be blindly appended without checking for consistancy. Otherwise
    a new log will be created.

    Args:
		df  (str): Dataframe that will be written to log.
        log (str): Log file that dataframe will be written to.
        header (list): Optional list of column names.
        mode (str): Write mode: 'a' for append or 'w' for overwrite.
    """
    if os.path.exists(log):
        mode='a'
        header = False

    elif not header:
        header = df.columns

    try:
        df.to_csv( log, header=headerjj, index=False, mode=mode )

    except IOerror as e:
        print("error({0}):{1}".format(e.errno, e.strerror))
        sys.exit(1)
